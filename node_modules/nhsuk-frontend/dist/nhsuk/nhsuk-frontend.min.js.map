{"version":3,"file":"nhsuk-frontend.min.js","sources":["../../src/nhsuk/common/nhsuk-frontend-version.mjs","../../src/nhsuk/common/index.mjs","../../src/nhsuk/common/configuration/normalise-string.mjs","../../src/nhsuk/common/configuration/extract-config-by-namespace.mjs","../../src/nhsuk/common/configuration/merge-configs.mjs","../../src/nhsuk/errors/index.mjs","../../src/nhsuk/common/configuration/normalise-options.mjs","../../src/nhsuk/component.mjs","../../src/nhsuk/configurable-component.mjs","../../src/nhsuk/common/configuration/normalise-dataset.mjs","../../src/nhsuk/components/button/button.mjs","../../src/nhsuk/components/character-count/character-count.mjs","../../src/nhsuk/components/checkboxes/checkboxes.mjs","../../src/nhsuk/components/error-summary/error-summary.mjs","../../src/nhsuk/components/header/header.mjs","../../src/nhsuk/components/notification-banner/notification-banner.mjs","../../src/nhsuk/components/radios/radios.mjs","../../src/nhsuk/components/skip-link/skip-link.mjs","../../src/nhsuk/components/tabs/tabs.mjs","../../src/nhsuk/index.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * NHS.UK frontend release version\n *\n * {@link https://github.com/nhsuk/nhsuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n *\n * @param {Element | null} $input - input element\n * @param {string} className - class to toggle\n */\nexport function toggleConditionalInput($input, className) {\n  if (!$input || !($input instanceof HTMLInputElement) || !className) {\n    return\n  }\n\n  const targetId = $input.getAttribute('aria-controls')\n  if (!targetId) {\n    return\n  }\n\n  const target = document.getElementById(targetId)\n  if (!target) {\n    return\n  }\n\n  $input.setAttribute('aria-expanded', $input.checked.toString())\n  target.classList.toggle(className, !$input.checked)\n}\n\n/**\n * Get NHS.UK frontend breakpoint value from CSS custom property\n *\n * @param {string} name - Breakpoint name\n */\nexport function getBreakpoint(name) {\n  const property = `--nhsuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n *\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.removeEventListener('focus', onFocus)\n    $element.addEventListener('blur', onBlur)\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    $element.removeEventListener('blur', onBlur)\n\n    if (options.onBlur) {\n      options.onBlur.call($element)\n    }\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus)\n\n  // Focus element\n  if (options.onBeforeFocus) {\n    options.onBeforeFocus.call($element)\n  }\n\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if NHS.UK frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but NHS.UK frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether NHS.UK frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('nhsuk-frontend-supported')\n}\n\n/**\n * Check for an object\n *\n * @template {Partial<Record<keyof ObjectType, unknown>>} ObjectType\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !Array.isArray(option)\n}\n\n/**\n * Check for valid scope\n *\n * @template {Element | Document} ScopeType\n * @param {unknown | ScopeType} $scope - Scope of the document to search within\n * @returns {$scope is ScopeType} Whether the scope can be queried\n */\nexport function isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document)\n}\n\n/**\n * Format error message\n *\n * @param {CompatibleClass} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\nexport * from './nhsuk-frontend-version.mjs'\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @param {string | undefined} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * @import { SchemaProperty } from './index.mjs'\n */\n","import { isObject } from '../index.mjs'\n\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n","import { isObject } from '../index.mjs'\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n","import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * NHS.UK frontend error\n *\n * A base class for `Error`s thrown by NHS.UK frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends NHSUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class NHSUKFrontendError extends Error {\n  name = 'NHSUKFrontendError'\n}\n\n/**\n * Indicates that NHS.UK frontend is not supported\n */\nexport class SupportError extends NHSUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if NHS.UK frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'NHS.UK frontend initialised without `<body class=\"nhsuk-frontend-supported\">` from template `<script>` snippet'\n        : 'NHS.UK frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'NHS.UK frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends NHSUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends NHSUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {ElementErrorOptions} options - Element error options\n   */\n  constructor(options) {\n    const { component, identifier, element, expectedType } = options\n\n    let message = identifier\n\n    // Append reason\n    message += element\n      ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n      : ' not found'\n\n    // Prepend with module name (optional)\n    if (component) {\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends NHSUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @param {CompatibleClass | string} componentOrMessage - Component or init error message\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            'Root element (`$root`) already initialised'\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @typedef {object} ElementErrorOptions\n * @property {Element | Document | null} [element] - The element in error (optional)\n * @property {CompatibleClass} [component] - Component throwing the error (optional)\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","import { isObject, isScope } from '../index.mjs'\n\n/**\n * Normalise options passed to `initAll` or `createAll`\n *\n * @template {CompatibleClass} ComponentClass\n * @param {Config | CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions] - Scope of the document to search within, initialisation options or error callback function\n * @returns {CreateAllOptions<ComponentClass>} Normalised options\n */\nexport function normaliseOptions(scopeOrOptions) {\n  let /** @type {Element | Document | null} */ $scope = document\n  let /** @type {OnErrorCallback<ComponentClass> | undefined} */ onError\n\n  // Handle options object\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions\n\n    // Scope must be valid or null\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope\n    }\n\n    // Error handler must be a function\n    if (typeof options.onError === 'function') {\n      onError = options.onError\n    }\n  }\n\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions\n  } else if (scopeOrOptions === null) {\n    $scope = null\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions\n  }\n\n  return {\n    scope: $scope,\n    onError\n  }\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { Config, CreateAllOptions, OnErrorCallback } from '../../index.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base component class\n *\n * Centralises the behaviours shared by our components\n *\n * @abstract\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  /**\n   * @type {RootElementType}\n   */\n  $root\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (!$root || !($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    }\n\n    this.$root = /** @type {RootElementType} */ ($root)\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const { moduleName } = childConstructor\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (isInitialised(this.$root, childConstructor.moduleName)) {\n      throw new InitError(childConstructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-component'\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): any}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * Component compatible class\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {{\n *   new(...args: ConstructorParameters<ComponentType>): InstanceType<ComponentType>,\n *   defaults?: ObjectNested,\n *   moduleName: string\n * }} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Component constructor\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {CompatibleClass & ComponentType} ComponentConstructor\n */\n\n/**\n * Component initialisation options\n *\n * @typedef {object} InitOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n */\n\n/**\n * @import { ObjectNested } from './common/configuration/index.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n","import {\n  mergeConfigs,\n  normaliseDataset\n} from './common/configuration/index.mjs'\nimport { formatErrorMessage, isObject } from './common/index.mjs'\nimport { Component } from './component.mjs'\nimport { ConfigError } from './errors/index.mjs'\n\n/**\n * Configurable base component class\n *\n * @abstract\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {HTMLElement} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * @type {ConfigurationType}\n   */\n  config\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ComponentConstructor<typeof ConfigurableComponent>} */ (\n        this.constructor\n      )\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this.$root.dataset)\n    )\n\n    // Override defaults with JavaScript config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(childConstructor.defaults, config ?? {})\n    )\n\n    // Override merged config with dataset config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        this.config,\n        this.configOverride(datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n\n  /**\n   * Config override\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset\n   *\n   * @abstract\n   * @param {Partial<ConfigurationType>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ConfigurationType>} Config to override by dataset\n   */\n  configOverride(_datasetConfig = {}) {\n    return {}\n  }\n}\n\n/**\n * @import { ObjectNested } from './common/configuration/index.mjs'\n * @import { ComponentConstructor } from './component.mjs'\n */\n","import { ConfigError } from '../../errors/index.mjs'\nimport { formatErrorMessage, isObject } from '../index.mjs'\n\nimport { extractConfigByNamespace } from './extract-config-by-namespace.mjs'\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding `data-namespace.property` nested values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {CompatibleClass & { schema?: Schema<ConfigurationType> }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { ObjectNested, Schema, SchemaProperty } from './index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * Button component\n *\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Initialise an event listener for keydown at document level\n     * this will help listening for later inserted elements with a role=\"button\"\n     */\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      target instanceof HTMLElement &&\n      target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault()\n      target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by\n   * double clicking buttons.\n   *\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running then we want to prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise button component\n *\n * @deprecated Use {@link createAll | `createAll(Button, options)`} instead.\n * @param {InitOptions & ButtonConfig} [options]\n */\nexport function initButtons(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $buttons = $scope?.querySelectorAll(\n    `[data-module=\"${Button.moduleName}\"]`\n  )\n\n  $buttons?.forEach(($root) => {\n    new Button($root, options)\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Character count component\n *\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n  lastInputValue = ''\n\n  /**\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {Record<string, never>} [config] - Not yet supported. Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.nhsuk-js-character-count')\n    if (\n      !$textarea ||\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.nhsuk-js-character-count`)'\n      })\n    }\n\n    this.$textarea = $textarea\n\n    const fallbackLimitMessageId = `${this.$textarea.id}-info`\n    const $fallbackLimitMessage = document.getElementById(\n      fallbackLimitMessageId\n    )\n\n    if (!$fallbackLimitMessage) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $fallbackLimitMessage,\n        identifier: `Count message (\\`id=\"${fallbackLimitMessageId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.nhsuk-error-message')\n\n    // Move the fallback count message to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $fallbackLimitMessage)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // fallback element for backwards compatibility as these may have been configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $fallbackLimitMessage.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $visibleCountMessage\n    )\n\n    // Hide the fallback limit message\n    $fallbackLimitMessage.classList.add('nhsuk-u-visually-hidden')\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Counts characters or words in text\n   *\n   * @param {string} text\n   */\n  count(text) {\n    let length\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      length = tokens.length\n    } else {\n      length = text.length\n    }\n    return length\n  }\n\n  /**\n   * Bind input propertychange to the elements and update based on the change\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur\n   */\n  checkIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible counter\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'nhsuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('nhsuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('nhsuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('nhsuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Update screen reader-specific counter\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Format update message\n   */\n  formattedUpdateMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    let charVerb = 'remaining'\n    let charNoun = 'character'\n    let displayNumber = remainingNumber\n    if (this.config.maxwords) {\n      charNoun = 'word'\n    }\n    charNoun += remainingNumber === -1 || remainingNumber === 1 ? '' : 's'\n\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining'\n    displayNumber = Math.abs(remainingNumber)\n\n    return `You have ${displayNumber} ${charNoun} ${charVerb}`\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true\n   */\n  isOverThreshold() {\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n\n    // Set threshold if presented in config\n    const thresholdPercent = this.config.threshold ?? 0\n    const thresholdValue = (this.maxLength * thresholdPercent) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   */\n  handleFocus() {\n    // If the field is focused, and a keyup event hasn't been detected for at\n    // least 1000 ms (1 second), then run the manual change check.\n    // This is so that the update triggered by the manual comparison doesn't\n    // conflict with debounced KeyboardEvent updates.\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0\n  })\n\n  /**\n   * Character config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    }\n  })\n}\n\n/**\n * Initialise character count component\n *\n * @deprecated Use {@link createAll | `createAll(CharacterCount)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initCharacterCounts(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $characterCounts = $scope?.querySelectorAll(\n    `[data-module=\"${CharacterCount.moduleName}\"]`\n  )\n\n  $characterCounts?.forEach(($root) => {\n    new CharacterCount($root)\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/checkboxes/with-conditional-content/}\n */\nexport class Checkboxes extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip checkboxes without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-checkboxes__conditional--hidden')\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"]${selectorGroup}`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n\n      // Uncheck all with same exclusive group by default, otherwise fall back to\n      // GOV.UK Frontend behaviour to uncheck all with the same name attribute\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        this.setInputState($inputWithSameName, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[type=\"checkbox\"][data-checkbox-exclusive]${selectorGroup}`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n\n      // Uncheck the exclusive input only. When no group is set, fall back to\n      // GOV.UK Frontend behaviour and locate the exclusive input by name\n      if (hasSameFormOwner) {\n        this.setInputState($exclusiveInput, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Set input state, optionally for matching exclusive group only\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   * @param {boolean} checked - Checkbox checked state\n   * @param {string} [exclusiveGroup] - Set state for matching exclusive group only (optional)\n   */\n  setInputState($input, checked, exclusiveGroup) {\n    const { checkboxExclusiveGroup } = $input.dataset\n\n    // Skip input when exclusive group does not match\n    if (\n      exclusiveGroup &&\n      checkboxExclusiveGroup &&\n      checkboxExclusiveGroup !== exclusiveGroup\n    ) {\n      return\n    }\n\n    $input.checked = checked\n    this.syncConditionalRevealWithInputState($input)\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if ('checkboxExclusive' in $clickedInput.dataset) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-checkboxes'\n}\n\n/**\n * Initialise checkboxes component\n *\n * @deprecated Use {@link createAll | `createAll(Checkboxes)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initCheckboxes(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $checkboxes = $scope?.querySelectorAll(\n    `[data-module=\"${Checkboxes.moduleName}\"]`\n  )\n\n  $checkboxes?.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { formatErrorMessage, setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Error summary component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v2.13.0/src/components/error-summary/error-summary.js\n *\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Error summary config override\n   *\n   * @param {Partial<ErrorSummaryConfig>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ErrorSummaryConfig>} Config to override by dataset\n   */\n  configOverride(_datasetConfig) {\n    let configOverrides = /** @type {Partial<ErrorSummaryConfig>} */ ({})\n\n    if ('focusOnPageLoad' in this.config) {\n      console.warn(\n        formatErrorMessage(\n          ErrorSummary,\n          'Option `focusOnPageLoad` is deprecated. Use `disableAutoFocus` instead.'\n        )\n      )\n\n      configOverrides.disableAutoFocus = !this.config.focusOnPageLoad\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for='inputId'\n   * - The closest parent `<label>`\n   *\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA - without this only the field type is announced\n   * (e.g. 'Edit, has autocomplete').\n   *\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = $target.hash.replace('#', '')\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Click event handler\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      focusOnPageLoad: { type: 'boolean' }, // Deprecated\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise error summary component\n *\n * @deprecated Use {@link createAll | `createAll(ErrorSummary, options)`} instead.\n * @param {InitOptions & ErrorSummaryConfig} [options]\n */\nexport function initErrorSummary(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(\n    `[data-module=\"${ErrorSummary.moduleName}\"]`\n  )\n\n  if (!$root) {\n    return\n  }\n\n  new ErrorSummary($root, options)\n}\n\n/**\n * Error summary config\n *\n * @see {@link ErrorSummary.defaults}\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [focusOnPageLoad=true] - Deprecated. Use `disableAutoFocus` instead.\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n */\nexport class Header extends Component {\n  /** @type {HTMLElement | null} */\n  $navigation = null\n\n  /** @type {HTMLElement | null} */\n  $navigationList = null\n\n  /** @type {NodeListOf<HTMLElement> | null} */\n  $navigationItems = null\n\n  /** @type {HTMLElement | null} */\n  $menu = null\n\n  /** @type {HTMLButtonElement | null} */\n  $menuToggle = null\n\n  /** @type {HTMLElement | null} */\n  $menuList = null\n\n  width = 0\n\n  /**\n   * @type {{ element: HTMLElement, right: number }[]}\n   */\n  breakpoints = []\n\n  /**\n   * @type {number | null}\n   */\n  updateNavigationTimer = null\n\n  menuIsEnabled = false\n  menuIsOpen = false\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $navigation = this.$root.querySelector('.nhsuk-header__navigation')\n    const $navigationList = this.$root.querySelector(\n      '.nhsuk-header__navigation-list'\n    )\n\n    const $navigationItems = /** @type {NodeListOf<HTMLElement>} */ (\n      this.$root.querySelectorAll('.nhsuk-header__navigation-item')\n    )\n\n    const $menu = this.$root.querySelector('.nhsuk-header__menu')\n    const $menuToggle = this.$root.querySelector('.nhsuk-header__menu-toggle')\n\n    // Check for navigation (optional)\n    if ($navigation) {\n      if (!($navigation instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Navigation (`<nav class=\"nhsuk-header__navigation\">`)'\n        })\n      }\n\n      if (!$navigationList || !($navigationList instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'List (`<ul class=\"nhsuk-header__navigation-list\">`)'\n        })\n      }\n\n      if (!$navigationItems.length) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'List items (`<li class=\"nhsuk-header__navigation-item\">`)'\n        })\n      }\n\n      if (!$menu || !($menu instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Menu item (`<li class=\"nhsuk-header__menu\" hidden>`)'\n        })\n      }\n\n      if (!$menuToggle || !($menuToggle instanceof HTMLButtonElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'Menu button (`<button class=\"nhsuk-header__menu-toggle\">`)',\n          expectedType: 'HTMLButtonElement'\n        })\n      }\n\n      this.$navigation = $navigation\n      this.$navigationList = $navigationList\n      this.$navigationItems = $navigationItems\n      this.$menu = $menu\n      this.$menuToggle = $menuToggle\n      this.$menuList = document.createElement('ul')\n    }\n\n    // Save bound functions so we can remove event listeners when unnecessary\n    this.handleEscapeKey = this.onEscapeKey.bind(this)\n    this.handleUpdateNavigation = this.updateNavigation.bind(this)\n    this.handleToggleMenu = this.toggleMenu.bind(this)\n\n    this.setupNavigation()\n    this.updateNavigation()\n  }\n\n  /**\n   * Reset navigation\n   *\n   * Calculate available space by summing the width of each navigation item\n   */\n  resetNavigation() {\n    const { $menu, $navigationList } = this\n    if (!$menu || !$navigationList) {\n      return\n    }\n\n    let right = 0\n\n    // Reset and calculate widths on every resize\n    this.breakpoints.forEach((breakpoint) => {\n      $navigationList.insertBefore(breakpoint.element, $menu)\n\n      // Calculate widths\n      right += breakpoint.element.offsetWidth\n      breakpoint.right = right\n    })\n\n    // Reset space for menu button\n    this.width = $navigationList.offsetWidth\n  }\n\n  /**\n   * Add the breakpoints with default positions\n   */\n  setupNavigation() {\n    const { $navigationItems } = this\n\n    // Skip with no navigation items\n    if (!$navigationItems) {\n      return\n    }\n\n    $navigationItems.forEach((element) => {\n      this.breakpoints.push({ element, right: 0 })\n    })\n\n    // Add resize listener for next update\n    window.addEventListener('resize', () => {\n      if (this.updateNavigationTimer) {\n        window.clearTimeout(this.updateNavigationTimer)\n      }\n\n      this.updateNavigationTimer = window.setTimeout(\n        this.handleUpdateNavigation,\n        100\n      )\n    })\n  }\n\n  /**\n   * Add the menu to the DOM\n   */\n  setupMenu() {\n    const { $menu, $menuList } = this\n\n    // Skip with no menu or when already appended\n    if (!$menu || !$menuList || $menuList.parentElement) {\n      return\n    }\n\n    $menuList.classList.add('nhsuk-header__menu-list')\n    $menuList.setAttribute('hidden', '')\n    $menu.appendChild($menuList)\n  }\n\n  /**\n   * Enable the menu\n   */\n  enableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already enabled\n    if (!$menu || !$menuToggle || this.menuIsEnabled) {\n      return\n    }\n\n    this.menuIsEnabled = true\n    $menu.removeAttribute('hidden')\n\n    // Add click listener to toggle menu\n    $menuToggle.addEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Disable the menu\n   */\n  disableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already disabled\n    if (!$menu || !$menuToggle || !this.menuIsEnabled) {\n      return\n    }\n\n    this.closeMenu()\n    this.menuIsEnabled = false\n    $menu.setAttribute('hidden', '')\n\n    // Remove click listener from toggle menu\n    $menuToggle.removeEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Close the menu\n   *\n   * Closes the menu and updates accessibility state.\n   *\n   * Removes the bottom border from the navigation\n   */\n  closeMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already closed\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      !this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = false\n    $menuList.setAttribute('hidden', '')\n    $menuToggle.setAttribute('aria-expanded', 'false')\n    $navigation.style.removeProperty('border-bottom-width')\n\n    // Remove escape key listener to close menu\n    document.removeEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Escape key handler\n   *\n   * This function is called when the user\n   * presses the escape key to close the menu.\n   *\n   * @param {KeyboardEvent} event - Key press event\n   */\n  onEscapeKey(event) {\n    if (event.key === 'Escape') {\n      this.closeMenu()\n    }\n  }\n\n  /**\n   * Open the menu\n   *\n   * Opens the menu and updates accessibility state.\n   *\n   * The menu is absolutely positioned, so it adds a border\n   * to the bottom of the navigation to prevent it from overlapping\n   *\n   * Adds event listeners for the close button,\n   */\n  openMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already open\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = true\n    $menuList.removeAttribute('hidden')\n    $menuToggle.setAttribute('aria-expanded', 'true')\n    $navigation.style.setProperty(\n      'border-bottom-width',\n      `${$menuList.offsetHeight}px`\n    )\n\n    // Add escape key listener to close menu\n    document.addEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * Toggles the menu between open and closed\n   */\n  toggleMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    if (this.menuIsOpen) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  /**\n   * Update navigation for the available space\n   *\n   * Moves all items that overflow the available space into the menu\n   */\n  updateNavigation() {\n    this.resetNavigation()\n\n    // Check for items that overflow\n    let menuItems = this.breakpoints.filter((breakpoint) => {\n      return breakpoint.right > this.width\n    })\n\n    // Disable menu if empty\n    if (!menuItems.length) {\n      this.disableMenu()\n      return\n    }\n\n    this.setupMenu()\n    this.enableMenu()\n\n    const { $menu, $menuList, $navigation } = this\n\n    // Skip when no menu or menu list\n    if (!$menu || !$menuList || !$navigation) {\n      return\n    }\n\n    // Subtract space for menu button\n    this.width -= $menu.offsetWidth\n\n    // Move items based on available width\n    this.breakpoints.forEach((breakpoint) => {\n      if (breakpoint.right > this.width) {\n        $menuList.insertAdjacentElement('beforeend', breakpoint.element)\n      }\n    })\n\n    // Update menu height if open\n    if (this.menuIsOpen) {\n      $navigation.style.setProperty(\n        'border-bottom-width',\n        `${$menuList.offsetHeight}px`\n      )\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-header'\n}\n\n/**\n * Initialise header component\n *\n * @deprecated Use {@link createAll | `createAll(Header)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initHeader(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(`[data-module=\"${Header.moduleName}\"]`)\n\n  if (!$root) {\n    return\n  }\n\n  new Header($root)\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Notification banner component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v5.10.2/packages/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs\n *\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'nhsuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise notification banner component\n *\n * @deprecated Use {@link createAll | `createAll(NotificationBanner, options)`} instead.\n * @param {InitOptions & NotificationBannerConfig} [options]\n */\nexport function initNotificationBanners(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $notificationBanners = $scope?.querySelectorAll(\n    `[data-module=\"${NotificationBanner.moduleName}\"]`\n  )\n\n  $notificationBanners?.forEach(($notificationBanner) => {\n    new NotificationBanner($notificationBanner, options)\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/radios/with-conditional-content/}\n */\nexport class Radios extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip radios without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-radios__conditional--hidden')\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-radios'\n}\n\n/**\n * Initialise radios component\n *\n * @deprecated Use {@link createAll | `createAll(Radios)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initRadios(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $radios = $scope?.querySelectorAll(\n    `[data-module=\"${Radios.moduleName}\"]`\n  )\n\n  $radios?.forEach(($root) => {\n    new Radios($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n *\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    const linkedElementId = hash.replace('#', '')\n    if (!linkedElementId) {\n      throw new ElementError({\n        component: SkipLink,\n        identifier: `Target link (\\`href=\"${href}\"\\`) hash fragment`\n      })\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for linked element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('nhsuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('nhsuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-skip-link'\n}\n\n/**\n * Initialise skip link component\n *\n * @deprecated Use {@link createAll | `createAll(SkipLink)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initSkipLinks(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $skipLinks = $scope?.querySelectorAll(\n    `[data-module=\"${SkipLink.moduleName}\"]`\n  )\n\n  $skipLinks?.forEach(($root) => {\n    new SkipLink($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n */\nexport class Tabs extends Component {\n  jsHiddenClass = 'nhsuk-tabs__panel--hidden'\n  changingHash = false\n\n  /**\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.nhsuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"nhsuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.nhsuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll('.nhsuk-tabs__list-item')\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"nhsuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"nhsuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for NHS.UK frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   */\n  onHashChange() {\n    const { hash } = window.location\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @param {string} hash - Hash fragment including #\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.nhsuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return\n    }\n\n    // set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.removeAttribute('tabindex')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @param {MouseEvent} event - Mouse click event\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $newTab = event.currentTarget\n\n    if (!$currentTab || !($newTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($newTab)\n    this.createHistoryEntry($newTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left', 'Right', 'Up' and 'Down' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'Left':\n      case 'Up':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'Right':\n      case 'Down':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  getPanel($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.nhsuk-tabs__list-item--selected a.nhsuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-tabs'\n}\n\n/**\n * Initialise tabs component\n *\n * @deprecated Use {@link createAll | `createAll(Tabs)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initTabs(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $tabs = $scope?.querySelectorAll(`[data-module=\"${Tabs.moduleName}\"]`)\n\n  $tabs?.forEach(($root) => {\n    new Tabs($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from './common/configuration/index.mjs'\nimport { isObject, isSupported } from './common/index.mjs'\nimport {\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n} from './components/index.mjs'\nimport { ElementError, SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find and initialise all of the\n * components provided as part of NHS.UK frontend.\n *\n * @overload\n * @param {Config} [config] - Config for all components (with optional scope)\n * @returns {void}\n */\n\n/**\n * @overload\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n * @returns {void}\n */\n\n/**\n * @param {Config | Element | Document | null} [scopeOrConfig]\n */\nexport function initAll(scopeOrConfig = {}) {\n  const config = isObject(scopeOrConfig) ? scopeOrConfig : {}\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrConfig)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        identifier: 'NHS.UK frontend scope element (`$scope`)'\n      })\n    }\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  components.forEach(([Component, componentConfig]) => {\n    createAll(Component, componentConfig, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass>} [options] - Options including scope of the document to search within and callback function if error throw by component on init\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {Element | null} [$scope] - Scope of the document to search within\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions]\n */\nexport function createAll(Component, config, scopeOrOptions) {\n  let /** @type {NodeListOf<Element> | undefined} */ $elements\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrOptions)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        component: Component,\n        identifier: 'Scope element (`$scope`)'\n      })\n    }\n\n    $elements = options.scope?.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return []\n  }\n\n  return Array.from($elements ?? [])\n    .map(($element) => {\n      try {\n        return /** @type {InstanceType<ComponentClass>} */ (\n          // Only pass config to components that accept it\n          !!config && 'defaults' in Component\n            ? new Component($element, config)\n            : new Component($element)\n        )\n      } catch (error) {\n        if (options.onError) {\n          options.onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter((instance) => !!instance) // Exclude components that errored\n}\n\nexport { isSupported, version } from './common/index.mjs'\nexport * from './components/index.mjs'\nexport * from './errors/index.mjs'\n\n/**\n * NHS.UK frontend config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<CompatibleClass>} [onError] - Initialisation error callback\n * @property {ComponentConfig<typeof Button>} [button] - Button config\n * @property {ComponentConfig<typeof CharacterCount>} [characterCount] - Character count config\n * @property {ComponentConfig<typeof ErrorSummary>} [errorSummary] - Error Summary config\n * @property {ComponentConfig<typeof NotificationBanner>} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Component config\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * Initialisation error context\n *\n * Contains the element, component class and configuration\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {Config | ComponentConfig<ComponentClass>} config - Config supplied to components\n */\n\n/**\n * Initialisation error callback\n *\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * Initialisation options\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n */\n\n/**\n * @import { CompatibleClass } from './component.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n"],"names":["version","toggleConditionalInput","$input","className","HTMLInputElement","targetId","getAttribute","target","document","getElementById","setAttribute","checked","toString","classList","toggle","setFocus","$element","options","isFocusable","onBlur","removeEventListener","call","removeAttribute","addEventListener","onFocus","onBeforeFocus","focus","isSupported","$scope","body","contains","isObject","option","Array","isArray","isScope","Element","Document","formatErrorMessage","Component","message","moduleName","normaliseString","value","property","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","extractConfigByNamespace","schema","dataset","namespace","properties","newObject","key","Object","entries","current","keyParts","split","index","name","mergeConfigs","configObjects","formattedConfigObject","configObject","keys","override","NHSUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","component","identifier","element","expectedType","InitError","componentOrMessage","normaliseOptions","scopeOrOptions","onError","scope","$root","childConstructor","elementType","checkSupport","checkInitialised","HTMLElement","hasAttribute","ConfigurableComponent","config","defaults","datasetConfig","out","entry","field","normaliseDataset","configOverride","_datasetConfig","Button","debounceFormSubmitTimer","event","handleKeyDown","debounce","preventDefault","click","preventDoubleClick","window","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","initButtons","$buttons","querySelectorAll","forEach","freeze","CharacterCount","_ref","_this$config$maxwords","lastInputTimestamp","lastInputValue","valueChecker","$textarea","querySelector","HTMLTextAreaElement","fallbackLimitMessageId","id","$fallbackLimitMessage","$errorMessage","insertAdjacentElement","$screenReaderCountMessage","createElement","$visibleCountMessage","add","maxLength","maxwords","maxlength","Infinity","bindChangeEvents","updateCountMessage","count","text","_text$match","match","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","updateVisibleCountMessage","updateScreenReaderCountMessage","isError","isOverThreshold","innerHTML","formattedUpdateMessage","remainingNumber","charVerb","charNoun","displayNumber","Math","abs","_this$config$threshol","currentLength","thresholdPercent","threshold","Date","now","setInterval","clearInterval","initCharacterCounts","$characterCounts","Checkboxes","$inputs","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","unCheckAllInputsExcept","checkboxExclusiveGroup","exclusiveGroup","selectorGroup","$inputWithSameName","form","setInputState","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","initCheckboxes","$checkboxes","ErrorSummary","disableAutoFocus","configOverrides","console","warn","focusOnPageLoad","getAssociatedLegendOrLabel","_document$querySelect","$fieldset","closest","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","focusTarget","$target","HTMLAnchorElement","inputId","hash","replace","$legendOrLabel","scrollIntoView","preventScroll","initErrorSummary","Header","$navigation","$navigationList","$navigationItems","$menu","$menuToggle","$menuList","width","breakpoints","updateNavigationTimer","menuIsEnabled","menuIsOpen","HTMLButtonElement","handleEscapeKey","onEscapeKey","bind","handleUpdateNavigation","updateNavigation","handleToggleMenu","toggleMenu","setupNavigation","resetNavigation","right","breakpoint","insertBefore","offsetWidth","push","clearTimeout","setupMenu","parentElement","appendChild","enableMenu","disableMenu","closeMenu","style","removeProperty","openMenu","setProperty","offsetHeight","filter","initHeader","NotificationBanner","initNotificationBanners","$notificationBanners","$notificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","initRadios","$radios","SkipLink","_this$$root$getAttrib","href","linkedElementId","$linkedElement","remove","initSkipLinks","$skipLinks","Tabs","jsHiddenClass","changingHash","mql","$tabs","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","boundOnHashChange","onHashChange","$tabList","$tabListItems","setupResponsiveChecks","getComputedStyle","documentElement","getPropertyValue","undefined","getBreakpoint","matchMedia","checkMode","addListener","_this$mql","matches","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","location","showTab","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$newTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","$nextTabListItem","nextElementSibling","$nextTab","$previousTabListItem","previousElementSibling","initTabs","initAll","scopeOrConfig","error","log","button","characterCount","errorSummary","notificationBanner","componentConfig","createAll","$elements","_options$scope","from","map","instance"],"mappings":"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"}